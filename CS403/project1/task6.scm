(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
	(define f (readExpr))
    (define first (readExpr))
    (define second (readExpr))
    (define third (readExpr))
    (define f1 (apply pfa (cons (eval f this) first)))
    (define f2 (apply f1 second))
    (define f3 (apply f2 third))
    (inspect (length (get 'parameters f1)))
    (inspect (length (get 'parameters f2)))
    (println f3)
)
(define (pfa a k)
	(cond
		((= k 1) (lambda (x) (lambda (@) (apply a (cons x @) ) ) ) )
		((= k 2) (lambda (x y) (lambda (@) (apply a (cons x (cons y @) ) ) ) ) )
		((= k 3) (lambda (x y z) (lambda (@) (apply a (cons x (cons y (cons z @) ) ) ) ) ) ) 
	)
)