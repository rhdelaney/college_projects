(define (barrier v)
    ;PREVIOUS COMMENT:
    ;barrier not implemented, but the jokes are good.

    ;no more jokes because it works?
    (define in '() )
    (define out '() )
    (define sflag 0)
    ;(define fflag 0)
    (define (start)
        ;(println "Barrier " (gettid) " started")
        (lock)
        ;(println "Barrier " (gettid) " started")
        (if (and (= sflag 1) (not (member? (gettid) in) ) ) 
            (begin
                (unlock)
                (sleep 1)
                (start)
            )
        )
        ;(println "Is in member? " (gettid) )
        ;(set! size (- size 1))

        (if (member? (gettid) in)
            (if (= (length in) v)
                (unlock)
                (begin
                    (unlock)
                    (start)
                )
            )
            (begin
                (set! in (cons (gettid) in) )
                (if (= (length in) v) 
                    (begin
                        (set! sflag 1)
                        (unlock)
                    )
                    (begin
                        (unlock)
                        (start)
                    )
                )
            )
        )
    )
    (define (finish)
        (lock)
        (set! out (cons (gettid) out))
        (inspect out)
        (inspect in)
        ;(println "Barrier " (gettid) " finished")
        (if (= (length in) (length out))
            (begin
                ;(println "Barrier " (gettid) " finished")
                (set! in '())
                (set! out '())
                (set! sflag 0)
                ;(pause)
                (unlock)
            )
            (begin  
                ;(println "Barrier " (gettid) " finished")
                (unlock)
            )
        )
    )
    (define (dispatch request)
        (if (eq?  request 'start)
            (start)
            (finish)
        )
    )
)