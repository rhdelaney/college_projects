(define (stream-map proc s)
    (if (stream-null? s) 
        the-empty-stream
        (cons-stream (proc (stream-car s))
            (stream-map proc (stream-cdr s)))
            )
        )
(define (integers-starting-from n)
    (cons-stream n (integers-starting-from (+ n 1)))
    )
(define (stream-display n s)
  (define (helper t c)
    (if (= c 0)
      'OK
      (begin
        (print (stream-car t) " ")
        (helper (stream-cdr t) (- c 1))
        )
      )
    )
  (print "(")
  (helper s n)
  (print "...)")
)
(define integers (integers-starting-from 1))
(define (triple x) (* x x x))
(define (sumCube x) (+ (triple (car x)) (triple (cadr x))))
(define (weighted-pairs s1 s2 weight)
    (define (merge-weighted s1 s2 weight)
        (cond
            ((stream-null? s1) s2)
            (else
                (cond
                    ((< (weight (stream-car s1)) (weight (stream-car s2)))
                        (cons-stream (stream-car s1) (merge-weighted (stream-cdr s1) s2 weight)))
                    ((= (weight (stream-car s1)) (weight (stream-car s2)))
                        (cons-stream (stream-car s1) (merge-weighted (stream-cdr s1) s2 weight)))
                    (else
                        (cons-stream (stream-car s2) (merge-weighted s1 (stream-cdr s2) weight))
                        )
                    )
                )
            )
        )
                    
    (cons-stream (list (stream-car s1) (stream-car s2))
        (merge-weighted (stream-map (lambda (x) (list (stream-car s1) x))
                        (stream-cdr s2))
                (weighted-pairs (stream-cdr s1) (stream-cdr s2) weight) weight)))


(define (ramanujan)
    (define (iter s)
        (define num (sumCube (stream-car s)))
        (if (= num (sumCube (stream-car (stream-cdr s)))) 
            (cons-stream num (iter (stream-cdr (stream-cdr s))))
            (iter (stream-cdr s))
            )
        )
    (iter (weighted-pairs integers integers sumCube))
)

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define f (readExpr))
    ;(define rmjn (ramanujan))
    (stream-display f (ramanujan))
    (println)
)