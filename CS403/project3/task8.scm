(define (stream-map f s)
  (cons-stream
    (f (stream-car s))
    (stream-map f (stream-cdr s))
    )
  )
(define scar stream-car)
(define scdr stream-cdr)
(define (stream-add s t)
  (cons-stream
    (+ (stream-car s) (stream-car t))
    (stream-add (stream-cdr s) (stream-cdr t))
    )
  )
(define (stream-display n s)
  (define (helper t c)
    (if (= c 0)
      'OK
      (begin
        (print (stream-car t) " ")
        (helper (stream-cdr t) (- c 1))
        )
      )
    )
  (print "(")
  (helper s n)
  (print "...)")
  )
(define (square x) (* x x))
(define tiny .00000000000000000000000000000000000000000001)
(define (euler-transform s)
  (let* ((s0 (scar s))                  ; Sn-1
        (s1 (scar (scdr s)))           ; Sn
        (s2 (scar (scdr (scdr s))))   ; Sn+1
        (divisor
          (if (= 0 (+ s0 (* -2 s1) s2))
            tiny
            (+ s0 (* -2 s1) s2)
            )
          ))
    (cons-stream 
      (- s2 (/ (^ (- s2 s1) 2) divisor))
      (euler-transform (stream-cdr s))))
  )

(define (make-tableau transform s)
  (cons-stream s (make-tableau transform (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car
              (make-tableau transform s)))

(define (get-convergence s)
  (define (helper t store count)
    (if (> tiny (abs (- (scar t) store)))
      count
      (helper (scdr t) (scar t) (+ count 1))
      )
    )
  (helper (scdr s) (scar s) 0)
  )

(define (pi-summands n)
  (cons-stream (/ 1.0 n)
               (stream-map - (pi-summands (+ n 2)))))
(define (partial-sum s)
  (cons-stream
    (scar s)
    (stream-add (scdr s) (partial-sum s))
    )
  )
(define pi-stream
  (stream-map (lambda (x) (* x 4)) (partial-sum (pi-summands 1))))

(define (summands x y n)
  (cons-stream (real (/ (real x) (real (^ (real y) n))))
    (stream-map - (summands x y (+ n 1)))
  )
)
(define (sum x y)
  (summands x y 1)
)
(define (psum x y)
  (partial-sum (sum x y ))
)
(define (acc-psum x y)
 (euler-transform (psum x y) )
)
(define (super-acc-psum x y )
  (accelerated-sequence euler-transform (psum x y) )
)

(define (main)
  (setPort (open (getElement ScamArgs 1) 'read))
  (define f (readExpr))
  (define x (readExpr))
  (define y (readExpr))
  (print "sum returns ")
  (stream-display f (sum x y) )
  (println)
  (print "psum returns ")
  (stream-display f (psum x y) )
  (println)
  (print "acc-psum returns ")
  (stream-display f (acc-psum x y) )
  (println)
  (print "super-acc-psum returns ")
  (stream-display f (super-acc-psum x y) )
  (println)
)