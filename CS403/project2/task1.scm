; ; (define (n-loop f bounds) 
; ;   (println f bounds)
; ;   (println (car (car bounds)) " and " (cdr (car bounds)))
; ;   (if (< (car (car bounds) ) (car (car (cdr bounds) )) )
; ;     (begin 
; ;       (f (car bounds))
; ;       (n-loop f (list (+ 1 (car bounds)) (car (cdr bounds)) ) )
; ;     )
; ;   )
; ; )
; (define (n-loop f @)
;   (define (help-n bounds)
;     (if (< (car bounds) (car (cdr bounds)) )
;       (begin 
;         (f (car bounds)) 
;         ;(help-n (list (+ 1 (car bounds)) (car (cdr bounds)) ) ) ;both are kinda working...weird
;         (n-loop f (list (+ 1 (car bounds)) (car (cdr bounds)) ) )
;       )
;     )
;   )
;  (help-n (car @))
; )
; (define (main)
;   (setPort (open (getElement ScamArgs 1) 'read))
;   (define op (readExpr))
;   (define ugh (readExpr))
;   ;(println (car ugh) )
;   ;(n-loop (lambda (a b c d e f g h i j) (print j i h g f e d c b a)) '(10 11) '(9 10) '(8 9) '(7 9) '(6 8) '(5 6) '(4 5) '(3 5) '(2 4) '(1 3))
;   (n-loop (eval op this) (car ugh))
;  ;iterate through and add more? maybe? idk
; )
(define (main)
  (setPort (open (getElement ScamArgs 1) 'read))
  (define f (readExpr))
  (define args (readExpr))
  (apply n-loop (cons (eval f this) args))
)
 
(define (n-loop f @)
  (define (loop arg c list func)
    (if (< c arg)
      (begin
        (if (null? list) (func c)
          (loop
            (getElement (car list) 1)
            (car (car list))
            (cdr list)
            (lambda (@) (apply func (cons c @)))
          )
        )
        (loop arg (+ c 1) list func)
      )
    )
  )
  (loop (getElement (car @) 1) (car (car @)) (cdr @) f)
)