(define (clean x)
    (define (allZero? n)
        ; If (length n) == 1
        (if (== 1 (length n))
            (if (!= 0 (car n))
                #f ; (car n != 0)
                #t ; (car n == 0)
            )
            ;else
            (if (!= 0 (car n))
                #f ; (car n != 0)
                (allZero? (cdr n)) ; (car n == 0)
            )
        )
    )
    (if (== (car x) '-)
        ; Fixes '(- 0 0 0)
        (if (allZero? (cdr x))
            '(0)
            x
        )
        ; Fixes '(0 0 0)
        (if (allZero? x)
            '(0)
            x
        )
    )
)

(define (big+ a b)
    (define (iter a b total addin)
        (if (> (length a) 0)
            (if (> (length b) 0)
                (begin
                    (define s (+ (car a) (car b) addin))
                    (if (> s 9)
                        (if (> (length total) 0)
                            (iter (cdr a) (cdr b) (append total (list (- s 10))) 1)
                            (iter (cdr a) (cdr b) (list (- s 10)) 1)
                        )
                        (if (> (length total) 0)
                            (iter (cdr a) (cdr b) (append total (list s)) 0)
                            (iter (cdr a) (cdr b) (list s) 0)
                        )
                    )
                )
                (if (> (length total) 0)
                    (if (== addin 0)
                        (append total a)
                        (if (> (length a) 1)
                            (append total (+ 1 (car a)) (cdr a))
                            (append total (+ 1 (car a)))
                        )
                    )
                    (if (== addin 0)
                        a
                        (if (> (length a) 1)
                            (append (+ 1 (car a)) (cdr a))
                            (+ 1 (car a))
                        )
                    )
                )
            )
            (if (> (length total) 0)
                (if (== addin 0)
                    (append total b)
                    (if (> (length b) 1)
                        (append total (+ 1 (car b)) (cdr b))
                        (append total (+ 1 (car b)))
                    )
                )
                (if (== addin 0)
                    b
                    (if (> (length b) 1)
                        (append (+ 1 (car b)) (cdr b))
                        (+ 1 (car b))
                    )
                )
            )
        )
    )
    (if (== (car a) '-)
        (if (== (car b) '-)
            (clean (reverse (append (iter (reverse (cdr a)) (reverse (cdr b)) nil 0) '(-))))
            (clean (big- b (cdr a)))
        )
        (if (== (car b) '-)
            (clean (big- a (cdr b)))
            (clean (reverse (iter (reverse a) (reverse b) nil 0)))
        )
    )
)
(define (invert n)
    (big- '(0) n)
)
(define (big- a b)
    (define (iter a b diff borrow)
        (if (> (length a) 0)
            (if (> (length b) 0)
                (begin
                    (define d (- (car a) borrow (car b)))
                    (if (>= d 0)
                        (if (> (length diff) 0)
                            (iter (cdr a) (cdr b) (append diff (list d)) 0)
                            (iter (cdr a) (cdr b) (list d) 0)
                        )
                        (if (> (length diff) 0)
                            (iter (cdr a) (cdr b) (append diff (list (+ 10 d))) 1)
                            (iter (cdr a) (cdr b) (list (+ 10 d)) 1)
                        )
                    )
                )
                (if (> (length diff) 0)
                    (if (== borrow 1)
                        (append (append diff a) '(-))
                        (append diff a)
                    )
                    (if (== borrow 1)
                        (append a '(-))
                        a
                    )
                )
            )
            (if (> (length b) 0)
                (if (> (length diff) 0)
                    (if (== borrow 1)
                        (append (invert (append diff b)) '(-))
                        (append (append diff b) '(-))
                    )
                    (if (== borrow 1)
                        (append (invert b) '(-))
                        (append b '(-))
                    )
                )
                diff
            )
        )
    )
    (if (== (car a) '-)
        (if (== (car b) '-)
            (clean (reverse (iter (reverse b) (reverse (cdr a)) '() 0)))
            (clean (append '(-) (big+ (cdr a) b)))
        )
        (if (== (car b) '-)
            (clean (big+ a (cdr b)))
            (clean (reverse (iter (reverse a) (reverse b) '() 0)))
        )
    )
)

(define (big* a b)
    (define (b-iter x n)
        (if (= n 0) 
            a
            (b-iter (big+ a b) (- n 1))
        )
    )
    (b-iter 1 (car b))
)
(define (big/ a b)
    (define (b-iter x n)
        (if (= n 0) 
            a
            (b-iter (big- a b) (- n 1))
        )
    )
    (if (< a b)
        0
        (b-iter 1 (car b))
    )
)
(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define f (readExpr))
    (define first (readExpr))
    (println f " plus " first " is " (big+ f first) )
    (println f " minus " first " is " (big- f first) )
    (println f " times " first " is " (big* f first) )
    (println f " divided by " first " is " (big/ f first) )

)