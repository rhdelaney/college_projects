(define (operator? exp)
  (let test ((ops '(+ - * /)))
    (cond ((null? ops) #f)
          ((equal? exp (car ops)) #t)
          (else (test (cdr ops))))))

(define (op-order< x y)
  (and (or (equal? x '+) (equal? x '-))
       (or (equal? y '*) (equal? y '/))))

(define (infix->prefix exp)
  (define (scan-op op args exp)
    (if (null? exp)
        (cons (cons op args) '())
        (let ((x (car exp)))
          (if (operator? x) 
              (if op
                  (cond ((equal? x op) (scan-exp op args (cdr exp)))
                        ((op-order< x op) 
                         (scan-exp x (list (cons op args)) (cdr exp)))
                        ((op-order< op x)
                         (let ((end-arg (car (reverse args)))
                               (body-args (cdr (reverse args))))
                           (let ((val (scan-exp x (list end-arg) (cdr exp))))
                                 (scan-op op (append body-args 
                                                     (if (equal? (caar val) op)
                                                         (cdar val)
                                                         (list (car val))))
                                          (cdr val)))))
                        (else (scan-exp x (list (cons op args)) (cdr exp))))
                  (scan-exp x args (cdr exp)))
              (error "Expected operator")))))
  (define (scan-exp op args exp)
    (let ((x (car exp)))
      (cond ((equal? x '-) (scan-op op (append args (list (list '- 0 (cadr exp)))) (cddr exp)))
            ((pair? x) (scan-op op (append args (list (infix->prefix x))) (cdr exp)))
            ((operator? x) (error "Unexpected operator"))
            (else (scan-op op (append args (list x)) (cdr exp))))))
  (let ((expr (car (scan-exp #f '() exp))))
    (if (car expr) expr (cadr expr))))

;; bonus function
(define (prefix->postfix exp)
  (cond 
        ((null? exp) '())
        ((pair? exp) (append (map prefix->postfix (cdr exp)) (list (prefix->postfix (car exp)))))
        (else exp)
  )
)

(define (main)
  (setPort (open (getElement ScamArgs 1) 'read))
  (define line (readExpr))
  (println (prefix->postfix line) )
)